name: Auto Tag on PR Merge
 
on:
  pull_request:
    types: [closed]
    branches:
      - main
      - master
 
jobs:
  auto-tag:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
   
    permissions:
      contents: write
      pull-requests: write
   
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
 
      - name: Get latest tag
        id: get-latest-tag
        run: |
          # Get the latest tag, if no tags exist, start with v1.0.0
          latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v1.0.0")
          echo "latest_tag=$latest_tag" >> $GITHUB_OUTPUT
          echo "Latest tag: $latest_tag"
 
      - name: Calculate next version
        id: next-version
        run: |
          latest_tag="${{ steps.get-latest-tag.outputs.latest_tag }}"
         
          # Remove 'v' prefix if it exists
          version=${latest_tag#v}
         
          # Split version into parts
          IFS='.' read -ra VERSION_PARTS <<< "$version"
          major=${VERSION_PARTS[0]}
          minor=${VERSION_PARTS[1]}
          patch=${VERSION_PARTS[2]}
         
          # Increment patch version
          new_patch=$((patch + 1))
          new_version="v${major}.${minor}.${new_patch}"
         
          echo "new_version=$new_version" >> $GITHUB_OUTPUT
          echo "Next version: $new_version"
 
      - name: Create and push new tag
        id: create-tag
        run: |
          new_version="${{ steps.next-version.outputs.new_version }}"
         
          # Configure git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
         
          # Create tag on the merge commit
          git tag -a "$new_version" -m "Auto-generated tag $new_version for PR #${{ github.event.pull_request.number }}"
         
          # Push the tag
          git push origin "$new_version"
         
          echo "Created and pushed tag: $new_version"
 
      - name: Comment on PR with new tag
        uses: actions/github-script@v7
        with:
          script: |
            const newVersion = '${{ steps.next-version.outputs.new_version }}';
            const prNumber = context.payload.pull_request.number;
           
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: `ðŸŽ‰ This PR has been tagged with version **${newVersion}**`
            });
 
      - name: Create GitHub Release
        uses: actions/github-script@v7
        with:
          script: |
            const newVersion = '${{ steps.next-version.outputs.new_version }}';
            const prNumber = context.payload.pull_request.number;
            const prTitle = context.payload.pull_request.title;
           
            await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: newVersion,
              name: newVersion,
              body: `Auto-generated release for PR #${prNumber}: ${prTitle}`,
              draft: false,
              prerelease: false
            });